from aiogram import types, Router, F  # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ aiogram
from aiogram.enums import ParseMode # –£–∫–∞–∑—ã–≤–∞–Ω–∏–µ Parse Mode –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π (Markdown/HTML)
from aiogram.filters import Command, or_f, StateFilter
from aiogram.fsm import state
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.formatting import Bold, as_list, as_marked_list, as_marked_section  # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞

import webbrowser # –†–∞–±–æ—Ç–∞ —Å –±—Ä–∞—É–∑–µ—Ä–æ–º –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç

from Aiogram.Common.filters import IsNum
from Aiogram.Common.reply_keyboards import start_kbd, del_kbd, menu_kbd
from Aiogram.Modules import currencies



# ROUTER
user_p_R = Router() # user_private_router - —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∫–æ–º–º–∞–Ω–¥ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π



# –û–¢–ú–ï–ù–ê –ò –°–ë–†–û–° –í–í–û–î–ê
# –°–±—Ä–æ—Å –≤–≤–æ–¥–∞
@user_p_R.message(StateFilter('*'), or_f(Command('cancel'), F.text.casefold() == '–æ—Ç–º–µ–Ω–∞',F.text.casefold() == 'cancel'))
async def cancel(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.clear()

    await message.answer("–í—ã –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –º–µ–Ω—é –±–æ—Ç–∞", reply_markup=menu_kbd)

# –ö–æ–º–º–∞–Ω–¥–∞ –Ω–∞–∑–∞–¥
@user_p_R.message(StateFilter('*'), or_f(Command('back'), F.text.casefold() == '–Ω–∞–∑–∞–¥', F.text.casefold() == 'back'))
async def back(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()

    if str(current_state) == "GetCurrency:value":
        await message.answer("–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç, –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ /cancel")
        return

    previous_step = None
    for step in GetCurrency.__all_states__:
        if step.state == current_state:
            await state.set_state(previous_step)
            await message.answer(f"<i>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É</i>: \n\n{GetCurrency.texts[previous_step.state]}", parse_mode=ParseMode.HTML)
            return
        previous_step = step



# –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ & /currency
class GetCurrency(StatesGroup):
    value = State()
    texts = {
        "SetCurrency:value": "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ CNY\n"
                             "(–¥–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ /cancel)"
    }

@user_p_R.message(StateFilter(None), or_f(Command("currency"), F.text.casefold() == '—Ä–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞'))
async def currency_command(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ CNY\n(–¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ /cancel)", reply_markup=del_kbd)
    await state.set_state(GetCurrency.value)

@user_p_R.message(GetCurrency.value, IsNum())
async def currency_command(message: types.Message, state: FSMContext):
    await state.update_data(value=float(message.text))
    data = await state.get_data()
    await message.answer(f"–†–∞—Å—á—ë—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {round(float(currencies.TO_RUB('CNY')) * data['value'], 2)}")
    await state.clear()

@user_p_R.message(GetCurrency.value)
async def currency_command(message: types.Message):
    await message.answer("–í–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥")



# START
@user_p_R.message(Command('start')) # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ start: filters.CommandStart
async def start_command(message: types.Message):
    await message.answer(f"–î–æ–±—Ä–æ–≥–æ –∑–¥—Ä–∞–≤–∏—è, {message.from_user.first_name}! –° –ø–æ–º–æ—â—å—é –æ–±—â–µ–Ω–∏—è —Å–æ –º–Ω–æ–π –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ Bioba."
                         f"\n<b>–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–º–∞–Ω–¥:</b>"
                         f"\n/menu - –¥–æ—Å—Ç—É–ø –∫ –º–µ–Ω—é –±–æ—Ç–∞"
                         f"\n/currency - —Ä–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞"
                         f"\n/site - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –Ω–∞—à c–∞–π—Ç Bioba"
                         f"\n/contacts - –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –ª–∏—á–Ω–æ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"
                         f"\n/delivery - —É–∑–Ω–∞—Ç—å, —Å –∫–∞–∫–∏—Ö –ø–ª–æ—â–∞–¥–æ–∫ –º—ã –º–æ–∂–µ–º –¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º —Ç–æ–≤–∞—Ä", reply_markup=start_kbd, parse_mode=ParseMode.HTML)
    # users_database.register(message)



# MENU
@user_p_R.message(or_f(Command("menu"), F.text.lower() == "–º–µ–Ω—é"))
async def menu_command(message: types.Message):
    await message.answer_photo(photo='AgACAgIAAxkBAAIDjmZmJuMvfJkQN-JiPQ_sNWMml_5BAAIo2jEbxbYxSzyH8_tpxSHfAQADAgADeAADNQQ')  # –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ —á–∞—Ç
    await message.answer("–í—ã –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –º–µ–Ω—é BiobaBot üò§.\n"
                         "–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏.\n"
                         "–î–ª—è –æ—Ñ–æ—Ä–º–µ–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: /contacts", reply_markup=menu_kbd)



# SITE
@user_p_R.message(or_f(Command("site"), F.text.lower() == "—Å–∞–π—Ç", F.text.lower() == "–ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç"))
async def site_command(message): # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–∞–π—Ç Bioba
    await message.answer('–û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å–∞–π—Ç Bioba', reply_markup=del_kbd)
    webbrowser.open('http://bioba.ru/')



# CONTACTS
@user_p_R.message(Command("contacts"))
async def contacts_command(message):
    await message.answer("–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞: \n@husbullik", reply_markup=del_kbd)



# DELIVERY
@user_p_R.message(or_f(Command("delivery"), F.text.lower().contains('–¥–æ—Å—Ç–∞–≤–∫')))
async def delivery_command(message):
    text = as_marked_section(
        Bold("–° –∫–∞–∫–∏—Ö –ø–ª–æ—â–∞–¥–æ–∫ –º—ã –º–æ–∂–µ–º –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä:"),
        "TaoBao",
        "1688",
        "Poison",
        marker="‚úÖ "
    )
    await message.answer(text.as_html(), reply_markup=del_kbd, parse_mode=ParseMode.HTML)








@user_p_R.message(F.photo)
async def menu_command(message: types.Message):
    await message.answer(str(message.photo[-1]))  # –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ —á–∞—Ç



# @user_p_R.message(F.text.lower().contains('—Ö—É–µ—Å–æ—Å'))
# async def start_command(message: types.Message):
#     await message.reply("–ü–æ—à—ë–ª –≤ –∂–æ–ø—É, –∫—É—Å–æ–∫ –≥–æ–≤–Ω–∞")
#
# @user_p_R.message(F.text)  # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# async def start_command(message: types.Message):
#     await message.answer(f"–≠—Ö–æ: {message.text}")
#         # users_database.register(message)

# @user_p_R.message(Command("menu"))
# async def menu_command(message: types.Message):
